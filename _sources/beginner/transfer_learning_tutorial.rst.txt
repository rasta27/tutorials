
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/transfer_learning_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_transfer_learning_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


Transfer Learning for Computer Vision Tutorial
==============================================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_

In this tutorial, you will learn how to train a convolutional neural network for
image classification using transfer learning. You can read more about the transfer
learning at `cs231n notes <https://cs231n.github.io/transfer-learning/>`__

Quoting these notes,

    In practice, very few people train an entire Convolutional Network
    from scratch (with random initialization), because it is relatively
    rare to have a dataset of sufficient size. Instead, it is common to
    pretrain a ConvNet on a very large dataset (e.g. ImageNet, which
    contains 1.2 million images with 1000 categories), and then use the
    ConvNet either as an initialization or a fixed feature extractor for
    the task of interest.

These two major transfer learning scenarios look as follows:

-  **Finetuning the ConvNet**: Instead of random initialization, we
   initialize the network with a pretrained network, like the one that is
   trained on imagenet 1000 dataset. Rest of the training looks as
   usual.
-  **ConvNet as fixed feature extractor**: Here, we will freeze the weights
   for all of the network except that of the final fully connected
   layer. This last fully connected layer is replaced with a new one
   with random weights and only this layer is trained.

.. GENERATED FROM PYTHON SOURCE LINES 33-52

.. code-block:: default

    # License: BSD
    # Author: Sasank Chilamkurthy

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.optim import lr_scheduler
    import torch.backends.cudnn as cudnn
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import os
    from tempfile import TemporaryDirectory

    cudnn.benchmark = True
    plt.ion()   # interactive mode





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <contextlib.ExitStack object at 0x7fa6b7c01660>



.. GENERATED FROM PYTHON SOURCE LINES 53-72

Load Data
---------

We will use torchvision and torch.utils.data packages for loading the
data.

The problem we're going to solve today is to train a model to classify
**ants** and **bees**. We have about 120 training images each for ants and bees.
There are 75 validation images for each class. Usually, this is a very
small dataset to generalize upon, if trained from scratch. Since we
are using transfer learning, we should be able to generalize reasonably
well.

This dataset is a very small subset of imagenet.

.. Note ::
   Download the data from
   `here <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   and extract it to the current directory.

.. GENERATED FROM PYTHON SOURCE LINES 72-102

.. code-block:: default


    # Data augmentation and normalization for training
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomResizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'data/hymenoptera_data'
    image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                              data_transforms[x])
                      for x in ['train', 'val']}
    dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,
                                                 shuffle=True, num_workers=4)
                  for x in ['train', 'val']}
    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
    class_names = image_datasets['train'].classes

    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")








.. GENERATED FROM PYTHON SOURCE LINES 103-107

Visualize a few images
^^^^^^^^^^^^^^^^^^^^^^
Let's visualize a few training images so as to understand the data
augmentations.

.. GENERATED FROM PYTHON SOURCE LINES 107-130

.. code-block:: default


    def imshow(inp, title=None):
        """Display image for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1)
        plt.imshow(inp)
        if title is not None:
            plt.title(title)
        plt.pause(0.001)  # pause a bit so that plots are updated


    # Get a batch of training data
    inputs, classes = next(iter(dataloaders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out, title=[class_names[x] for x in classes])





.. image-sg:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
   :alt: ['ants', 'ants', 'ants', 'ants']
   :srcset: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 131-142

Training the model
------------------

Now, let's write a general function to train a model. Here, we will
illustrate:

-  Scheduling the learning rate
-  Saving the best model

In the following, parameter ``scheduler`` is an LR scheduler object from
``torch.optim.lr_scheduler``.

.. GENERATED FROM PYTHON SOURCE LINES 142-215

.. code-block:: default



    def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
        since = time.time()

        # Create a temporary directory to save training checkpoints
        with TemporaryDirectory() as tempdir:
            best_model_params_path = os.path.join(tempdir, 'best_model_params.pt')
    
            torch.save(model.state_dict(), best_model_params_path)
            best_acc = 0.0

            for epoch in range(num_epochs):
                print(f'Epoch {epoch}/{num_epochs - 1}')
                print('-' * 10)

                # Each epoch has a training and validation phase
                for phase in ['train', 'val']:
                    if phase == 'train':
                        model.train()  # Set model to training mode
                    else:
                        model.eval()   # Set model to evaluate mode

                    running_loss = 0.0
                    running_corrects = 0

                    # Iterate over data.
                    for inputs, labels in dataloaders[phase]:
                        inputs = inputs.to(device)
                        labels = labels.to(device)

                        # zero the parameter gradients
                        optimizer.zero_grad()

                        # forward
                        # track history if only in train
                        with torch.set_grad_enabled(phase == 'train'):
                            outputs = model(inputs)
                            _, preds = torch.max(outputs, 1)
                            loss = criterion(outputs, labels)

                            # backward + optimize only if in training phase
                            if phase == 'train':
                                loss.backward()
                                optimizer.step()

                        # statistics
                        running_loss += loss.item() * inputs.size(0)
                        running_corrects += torch.sum(preds == labels.data)
                    if phase == 'train':
                        scheduler.step()

                    epoch_loss = running_loss / dataset_sizes[phase]
                    epoch_acc = running_corrects.double() / dataset_sizes[phase]

                    print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')

                    # deep copy the model
                    if phase == 'val' and epoch_acc > best_acc:
                        best_acc = epoch_acc
                        torch.save(model.state_dict(), best_model_params_path)

                print()

            time_elapsed = time.time() - since
            print(f'Training complete in {time_elapsed // 60:.0f}m {time_elapsed % 60:.0f}s')
            print(f'Best val Acc: {best_acc:4f}')

            # load best model weights
            model.load_state_dict(torch.load(best_model_params_path))
        return model









.. GENERATED FROM PYTHON SOURCE LINES 216-221

Visualizing the model predictions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generic function to display predictions for a few images


.. GENERATED FROM PYTHON SOURCE LINES 221-248

.. code-block:: default


    def visualize_model(model, num_images=6):
        was_training = model.training
        model.eval()
        images_so_far = 0
        fig = plt.figure()

        with torch.no_grad():
            for i, (inputs, labels) in enumerate(dataloaders['val']):
                inputs = inputs.to(device)
                labels = labels.to(device)

                outputs = model(inputs)
                _, preds = torch.max(outputs, 1)

                for j in range(inputs.size()[0]):
                    images_so_far += 1
                    ax = plt.subplot(num_images//2, 2, images_so_far)
                    ax.axis('off')
                    ax.set_title(f'predicted: {class_names[preds[j]]}')
                    imshow(inputs.cpu().data[j])

                    if images_so_far == num_images:
                        model.train(mode=was_training)
                        return
            model.train(mode=was_training)








.. GENERATED FROM PYTHON SOURCE LINES 249-254

Finetuning the ConvNet
----------------------

Load a pretrained model and reset final fully connected layer.


.. GENERATED FROM PYTHON SOURCE LINES 254-271

.. code-block:: default


    model_ft = models.resnet18(weights='IMAGENET1K_V1')
    num_ftrs = model_ft.fc.in_features
    # Here the size of each output sample is set to 2.
    # Alternatively, it can be generalized to ``nn.Linear(num_ftrs, len(class_names))``.
    model_ft.fc = nn.Linear(num_ftrs, 2)

    model_ft = model_ft.to(device)

    criterion = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /var/lib/jenkins/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth

      0%|          | 0.00/44.7M [00:00<?, ?B/s]
     50%|####9     | 22.3M/44.7M [00:00<00:00, 233MB/s]
    100%|##########| 44.7M/44.7M [00:00<00:00, 237MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 272-278

Train and evaluate
^^^^^^^^^^^^^^^^^^

It should take around 15-25 min on CPU. On GPU though, it takes less than a
minute.


.. GENERATED FROM PYTHON SOURCE LINES 278-282

.. code-block:: default


    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           num_epochs=25)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 0/24
    ----------
    train Loss: 0.4802 Acc: 0.7623
    val Loss: 0.2960 Acc: 0.8824

    Epoch 1/24
    ----------
    train Loss: 0.5458 Acc: 0.7828
    val Loss: 0.6032 Acc: 0.7647

    Epoch 2/24
    ----------
    train Loss: 0.4299 Acc: 0.8279
    val Loss: 0.2264 Acc: 0.9085

    Epoch 3/24
    ----------
    train Loss: 0.6180 Acc: 0.7664
    val Loss: 0.3498 Acc: 0.8758

    Epoch 4/24
    ----------
    train Loss: 0.4046 Acc: 0.8443
    val Loss: 0.3250 Acc: 0.8824

    Epoch 5/24
    ----------
    train Loss: 0.4913 Acc: 0.7869
    val Loss: 0.2697 Acc: 0.8954

    Epoch 6/24
    ----------
    train Loss: 0.3917 Acc: 0.8238
    val Loss: 0.3473 Acc: 0.8824

    Epoch 7/24
    ----------
    train Loss: 0.3903 Acc: 0.8320
    val Loss: 0.2453 Acc: 0.9020

    Epoch 8/24
    ----------
    train Loss: 0.2218 Acc: 0.8934
    val Loss: 0.2385 Acc: 0.9281

    Epoch 9/24
    ----------
    train Loss: 0.2830 Acc: 0.8689
    val Loss: 0.2429 Acc: 0.9346

    Epoch 10/24
    ----------
    train Loss: 0.3898 Acc: 0.8402
    val Loss: 0.2258 Acc: 0.9150

    Epoch 11/24
    ----------
    train Loss: 0.3063 Acc: 0.8402
    val Loss: 0.2743 Acc: 0.9085

    Epoch 12/24
    ----------
    train Loss: 0.2545 Acc: 0.8893
    val Loss: 0.2366 Acc: 0.9346

    Epoch 13/24
    ----------
    train Loss: 0.2944 Acc: 0.8730
    val Loss: 0.1976 Acc: 0.9281

    Epoch 14/24
    ----------
    train Loss: 0.2657 Acc: 0.8852
    val Loss: 0.2332 Acc: 0.9281

    Epoch 15/24
    ----------
    train Loss: 0.3017 Acc: 0.8689
    val Loss: 0.2856 Acc: 0.8889

    Epoch 16/24
    ----------
    train Loss: 0.2283 Acc: 0.9098
    val Loss: 0.2162 Acc: 0.9216

    Epoch 17/24
    ----------
    train Loss: 0.2618 Acc: 0.8852
    val Loss: 0.2208 Acc: 0.9150

    Epoch 18/24
    ----------
    train Loss: 0.2860 Acc: 0.8893
    val Loss: 0.2316 Acc: 0.9281

    Epoch 19/24
    ----------
    train Loss: 0.1905 Acc: 0.9139
    val Loss: 0.2045 Acc: 0.9477

    Epoch 20/24
    ----------
    train Loss: 0.2817 Acc: 0.8811
    val Loss: 0.2024 Acc: 0.9346

    Epoch 21/24
    ----------
    train Loss: 0.2611 Acc: 0.8811
    val Loss: 0.2358 Acc: 0.9150

    Epoch 22/24
    ----------
    train Loss: 0.3318 Acc: 0.8689
    val Loss: 0.2128 Acc: 0.9346

    Epoch 23/24
    ----------
    train Loss: 0.2913 Acc: 0.8525
    val Loss: 0.2228 Acc: 0.9346

    Epoch 24/24
    ----------
    train Loss: 0.3047 Acc: 0.8648
    val Loss: 0.2215 Acc: 0.9150

    Training complete in 1m 16s
    Best val Acc: 0.947712




.. GENERATED FROM PYTHON SOURCE LINES 284-288

.. code-block:: default


    visualize_model(model_ft)





.. image-sg:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
   :alt: predicted: ants, predicted: bees, predicted: ants, predicted: bees, predicted: bees, predicted: ants
   :srcset: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 289-299

ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad = False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <https://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.


.. GENERATED FROM PYTHON SOURCE LINES 299-320

.. code-block:: default


    model_conv = torchvision.models.resnet18(weights='IMAGENET1K_V1')
    for param in model_conv.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)

    model_conv = model_conv.to(device)

    criterion = nn.CrossEntropyLoss()

    # Observe that only parameters of final layer are being optimized as
    # opposed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)









.. GENERATED FROM PYTHON SOURCE LINES 321-328

Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.


.. GENERATED FROM PYTHON SOURCE LINES 328-332

.. code-block:: default


    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 0/24
    ----------
    train Loss: 0.6996 Acc: 0.6516
    val Loss: 0.2014 Acc: 0.9346

    Epoch 1/24
    ----------
    train Loss: 0.4233 Acc: 0.8033
    val Loss: 0.2656 Acc: 0.8758

    Epoch 2/24
    ----------
    train Loss: 0.4603 Acc: 0.7869
    val Loss: 0.1847 Acc: 0.9477

    Epoch 3/24
    ----------
    train Loss: 0.3096 Acc: 0.8566
    val Loss: 0.1747 Acc: 0.9477

    Epoch 4/24
    ----------
    train Loss: 0.4427 Acc: 0.8156
    val Loss: 0.1630 Acc: 0.9477

    Epoch 5/24
    ----------
    train Loss: 0.5505 Acc: 0.7828
    val Loss: 0.1643 Acc: 0.9477

    Epoch 6/24
    ----------
    train Loss: 0.3004 Acc: 0.8607
    val Loss: 0.1744 Acc: 0.9542

    Epoch 7/24
    ----------
    train Loss: 0.4083 Acc: 0.8361
    val Loss: 0.1892 Acc: 0.9412

    Epoch 8/24
    ----------
    train Loss: 0.4483 Acc: 0.7910
    val Loss: 0.1984 Acc: 0.9477

    Epoch 9/24
    ----------
    train Loss: 0.3335 Acc: 0.8279
    val Loss: 0.1942 Acc: 0.9412

    Epoch 10/24
    ----------
    train Loss: 0.2413 Acc: 0.8934
    val Loss: 0.2001 Acc: 0.9477

    Epoch 11/24
    ----------
    train Loss: 0.3107 Acc: 0.8689
    val Loss: 0.1801 Acc: 0.9412

    Epoch 12/24
    ----------
    train Loss: 0.3032 Acc: 0.8689
    val Loss: 0.1669 Acc: 0.9477

    Epoch 13/24
    ----------
    train Loss: 0.3587 Acc: 0.8525
    val Loss: 0.1900 Acc: 0.9477

    Epoch 14/24
    ----------
    train Loss: 0.2771 Acc: 0.8893
    val Loss: 0.2317 Acc: 0.9216

    Epoch 15/24
    ----------
    train Loss: 0.3064 Acc: 0.8852
    val Loss: 0.1909 Acc: 0.9477

    Epoch 16/24
    ----------
    train Loss: 0.4243 Acc: 0.8238
    val Loss: 0.2227 Acc: 0.9346

    Epoch 17/24
    ----------
    train Loss: 0.3297 Acc: 0.8238
    val Loss: 0.1916 Acc: 0.9412

    Epoch 18/24
    ----------
    train Loss: 0.4235 Acc: 0.8238
    val Loss: 0.1766 Acc: 0.9477

    Epoch 19/24
    ----------
    train Loss: 0.2500 Acc: 0.8934
    val Loss: 0.2003 Acc: 0.9477

    Epoch 20/24
    ----------
    train Loss: 0.2413 Acc: 0.8934
    val Loss: 0.1821 Acc: 0.9477

    Epoch 21/24
    ----------
    train Loss: 0.3762 Acc: 0.8115
    val Loss: 0.1842 Acc: 0.9412

    Epoch 22/24
    ----------
    train Loss: 0.3485 Acc: 0.8566
    val Loss: 0.2166 Acc: 0.9281

    Epoch 23/24
    ----------
    train Loss: 0.3625 Acc: 0.8361
    val Loss: 0.1747 Acc: 0.9412

    Epoch 24/24
    ----------
    train Loss: 0.3840 Acc: 0.8320
    val Loss: 0.1768 Acc: 0.9412

    Training complete in 0m 44s
    Best val Acc: 0.954248




.. GENERATED FROM PYTHON SOURCE LINES 334-340

.. code-block:: default


    visualize_model(model_conv)

    plt.ioff()
    plt.show()




.. image-sg:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
   :alt: predicted: bees, predicted: ants, predicted: bees, predicted: bees, predicted: ants, predicted: ants
   :srcset: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 341-348

Further Learning
-----------------

If you would like to learn more about the applications of transfer learning,
checkout our `Quantized Transfer Learning for Computer Vision Tutorial <https://pytorch.org/tutorials/intermediate/quantized_transfer_learning_tutorial.html>`_.




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  5.747 seconds)


.. _sphx_glr_download_beginner_transfer_learning_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
